pipeline {
    agent {
        kubernetes {
            label 'checkov-agent'
            defaultContainer 'checkov'
            yaml """
            apiVersion: v1
            kind: Pod
            spec:
              containers:
              - name: checkov
                image: bridgecrew/checkov:latest
                command:
                - cat
                tty: true
                volumeMounts:
                - name: jenkins-workspace
                  mountPath: /var/jenkins
              - name: jnlp
                image: jenkins/inbound-agent:4.10-3
                volumeMounts:
                - name: jenkins-workspace
                  mountPath: /var/jenkins
              volumes:
              - name: jenkins-workspace
                emptyDir: {}
            """
        }
    }
    
    stages {
        stage('Checkout') {
            steps {
                git branch: 'master', url: 'https://github.com/jllg18/End-to-End-Kubernetes-DevSecOps-Tetris-Project.git'
                stash includes: '**/*', name: 'terraform-code'
            }
        }
        stage('Checkov') {
            steps {
                container('checkov') {
                    unstash 'terraform-code'
                    script {
                        try {
                            sh 'checkov -d . --use-enforcement-rules -o cli -o junitxml --output-file-path console,results.xml --repo-id example/terragoat --branch master'
                            junit skipPublishingChecks: true, testResults: 'results.xml'
                        } catch (err) {
                            junit skipPublishingChecks: true, testResults: 'results.xml'
                            throw err
                        }
                    }
                }
            }
        }
        stage('Initializing Terraform') {
            steps {
                withAWS(credentials: 'aws-key', region: 'us-east-1') {
                dir('EKS-TF') {
                    script {
                        sh 'terraform init'
                    }
                }
                }
            }
        }
        stage('Validate Terraform Code') {
            steps {
                withAWS(credentials: 'aws-key', region: 'us-east-1') {
                dir('EKS-TF') {
                    script {
                        sh 'terraform validate'
                    }
                }
                }
            }
        }
        stage('Terraform Plan') {
            steps {
                withAWS(credentials: 'aws-key', region: 'us-east-1') {
                dir('EKS-TF') {
                    script {
                        sh "terraform plan -var-file=${params.'File-Name'}"
                    }
                }
                }
            }
        }
        stage('Terraform Action') {
            steps {
                withAWS(credentials: 'aws-key', region: 'us-east-1') { 
                script {
                    echo "${params.'Terraform-Action'}"
                    dir('EKS-TF') {
                        script {
                            if (params.'Terraform-Action' == 'apply') {
                                sh "terraform apply -auto-approve -var-file=${params.'File-Name'}"
                            } else if (params.'Terraform-Action' == 'destroy') {
                                sh "terraform destroy -auto-approve -var-file=${params.'File-Name'}"
                            } else {
                                error "Invalid value for Terraform-Action: ${params.'Terraform-Action'}"
                            }
                        }
                    }
                }
                }
            }
        }
    }
    
    options {
        preserveStashes()
        timestamps()
    }
}
